# The transform-factory class is a wrapper around the model types in Azure Media Services to make code look a lot cleaner
# when creating custom encoding transforms. The goal of the transform-factory is to eliminate the need of declaring the
# odataTyoe strings constantly while working with the Typescript types that are generated by the Azure SDK auto generation
# code.

# This helps to clean up your custom Transform code and keeps things neat.

# NOTE: This is not complete list here, so feel free to add new codecs, formats, or preset types you would like to simplify in your code.

from azure.mgmt.media.models import (
    AacAudio,
    H264Layer,
    H264Video,
    H265Video,
    H265Layer,
    Mp4Format,
    PngFormat,
    PngImage,
    PngLayer,
    JpgFormat,
    JpgLayer,
    JpgImage,
    StandardEncoderPreset,
    BuiltInStandardEncoderPreset,
    SelectAudioTrackById, # Not included in the Python SDK
    SelectAudioTrackByAttribute, # Not included in the Python SDK
    InputFile, # Not included in the Python SDK
    JobInputAsset, # Not included in the Python SDK
    JobInputHttp, # Not included in the Python SDK
    JobInputs, # Not included in the Python SDK
    JobOutputAsset, # Not included in the Python SDK
    # AudioAnalyzerPresetUnion,
    VideoAnalyzerPreset,
    AudioAnalyzerPreset,
    VideoOverlay,
    JobInputSequence, # Not included in the Python SDK
    CopyVideo,
    CopyAudio,
    TransportStreamFormat,
    JobInputClip, # Not included in the Python SDK
    # JobInputClipUnion,
    # JobInputUnion
)

def createCopyVideo(video: CopyVideo):
    return ({
        "odataType": "#Microsoft.Media.CopyVideo"    
    }, video)

def createCopyAudio(audio: CopyAudio):
    return ({
        "odataType": "#Microsoft.Media.CopyAudio"
    }, audio)

def createH264Video(video: H264Video):
    return ({
        "odataType": "#Microsoft.Media.H264Video"
    }, video)

def createH264Layer(layer: H264Layer):
    return ({
        "odataType": "#Microsoft.Media.H264Layer"
    }, layer)

def createH265Video(video: H265Video):
    return ({
        "odataType": "#Microsoft.Media.H265Video"
    }, video)

def createH265Layer(layer: H265Layer):
    return ({
        "odataType": "#Microsoft.Media.H265Layer"
    }, layer)

def createAACaudio(audio: AacAudio):
    return ({
        "odataType": "#Microsoft.Media.AacAudio"
    }, audio)

def createPngImage(image: PngImage):
    return ({
        "odataType": "#Microsoft.Media.PngImage"
    }, image)

def createPngLayer(image: PngLayer):
    return ({
        "odataType": "#Microsoft.Media.PngLayer"
    }, image)

def createPngFormat(pngFormat: PngFormat):
    return ({
        "odataType": "#Microsoft.Media.PngFormat"
    }, pngFormat)

def createJpgImage(image: JpgImage):
    return ({
        "odataType": "#Microsoft.Media.JpgImage"
    }, image)

def createJpgLayer(image: JpgLayer):
    return ({
        "odataType": "#Microsoft.Media.JpgLayer"
    }, image)

def createJpgFormat(format: JpgFormat):
    return ({
        "odataType": "#Microsoft.Media.JpgFormat"
    }, format)

def createStandardEncoderPreset(standardEncoder: StandardEncoderPreset):
    return ({
        "odataType": "#Microsoft.Media.StandardEncoderPreset"
    }, standardEncoder)

def createBuiltInStandardEncoderPreset(builtInStandardEncoder: BuiltInStandardEncoderPreset):
    return ({
        "odataType": "#Microsoft.Media.BuiltInStandardEncoderPreset"
    }, builtInStandardEncoder)

def createAudioAnalyzerPreset(audioAnalyzerPreset: AudioAnalyzerPreset):
    return ({
        "odataType": "#Microsoft.Media.AudioAnalyzerPreset"
    }, audioAnalyzerPreset)

def createVideoAnalyzerPreset(videoAnalyzerPreset: VideoAnalyzerPreset):
    return ({
        "odataType": "#Microsoft.Media.VideoAnalyzerPreset"
    }, videoAnalyzerPreset)

def createMp4Format(mp4Format: Mp4Format):
    return ({
        "odataType": "#Microsoft.Media.Mp4Format"
    }, mp4Format)

def createTSFormat(tsFormat: TransportStreamFormat):
    return ({
        "odataType": "#Microsoft.Media.TransportStreamFormat"
    }, tsFormat)

def createSelectAudioTrackById(audioTrackById: SelectAudioTrackById): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.SelectAudioTrackById"
    }, audioTrackById)

def createSelectAudioTrackByAttribute(audioTrackByAttribute: SelectAudioTrackByAttribute): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.SelectAudioTrackByAttribute"
    }, audioTrackByAttribute)

def createInputFile(inputFile: InputFile): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.InputFile"
    }, inputFile)

def createJobInputAsset(inputAsset: JobInputAsset): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.JobInputAsset"
    }, inputAsset)

def createJobInputClip(inputAsset: JobInputClip): # Not included in the Pyton SDK
    return ({
        "odataType": "#Microsoft.Media.JobInputClip"
    }, inputAsset)

def createJobInputHttp(inputHttp: JobInputHttp): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.JobInputHttp"
    }, inputHttp)

def createJobOutputAsset(outputAsset: JobOutputAsset): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.JobOutputAsset"
    }, outputAsset)

def createJobInputSequence(jobInputSequence: JobInputSequence): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.JobInputSequence"
    }, jobInputSequence)

def createJobInputs(jobInputs: JobInputs): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.JobInputs"
    }, jobInputs)

def createVideoOverlay(videoOverlay: VideoOverlay): # Not included in the Python SDK
    return ({
        "odataType": "#Microsoft.Media.VideoOverlay"
    }, videoOverlay)